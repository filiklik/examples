<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
    <http:listener-config name="api-httpListenerConfig" host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration" />
    <apikit:config name="api-config" raml="api.raml" consoleEnabled="false" doc:name="Router" />
    <db:mysql-config name="MySQL_Configuration" host="localhost" port="3306" user="root" password="miracle" database="bank" doc:name="MySQL Configuration" />
    <flow name="api-main">
        <http:listener config-ref="api-httpListenerConfig" path="/api/*" doc:name="HTTP" />
        <apikit:router config-ref="api-config" doc:name="APIkit Router" />
        <exception-strategy ref="api-apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy" />
    </flow>
    <flow name="api-console">
        <http:listener config-ref="api-httpListenerConfig" path="/console/*" doc:name="HTTP" />
        <apikit:console config-ref="api-config" doc:name="APIkit Console" />
    </flow>
    <flow name="put:/employees/{employeeId}:api-config">
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	emp_salary: payload.emp_salary as :string,
	emp_name: payload.emp_name,
	email: payload.email,
	emp_id: payload.emp_id as :string
}]]></dw:set-payload>
        </dw:transform-message>
        <enricher doc:name="Message Enricher" source="#[payload]" target="#[flowVars['exists']]">
            <db:insert config-ref="MySQL_Configuration" doc:name="Database">
                <db:parameterized-query><![CDATA[UPDATE employee 
SET emp_id = #[payload.emp_id],emp_salary = #[payload.emp_salary],emp_name=#[payload.emp_name], email=#[payload.email]
WHERE  emp_id = #[flowVars.employeeId]
       AND ( emp_id !=  #[payload.emp_id]
             or emp_salary != #[payload.emp_salary] 
             or emp_name != #[payload.emp_name] 
             or email != #[payload.email] )]]></db:parameterized-query>
            </db:insert>
        </enricher>
  

        <logger message="#[payload]" level="INFO" doc:name="Logger" />
        <choice doc:name="Choice">
            <when expression="#[flowVars['exists'] == true]">
                <set-payload value="Employee updated" doc:name="Employee updated" />
            </when>
            <otherwise>
                <set-payload value="Employee already Updated please make change and Update" doc:name="Set Payload" />
            </otherwise>
        </choice>
    </flow>
    <flow name="delete:/employees/{employeeId}:api-config">
        <enricher doc:name="Message Enricher">
            <db:select config-ref="MySQL_Configuration" doc:name="Database">
                <db:parameterized-query><![CDATA[SELECT * FROM employee where emp_id = #[flowVars.employeeId] and status = "inactive"]]></db:parameterized-query>
            </db:select>
            <enrich source="#[payload.size() &gt; 0 ]" target="#[flowVars['exists']]"/>
        </enricher>
 

        <choice doc:name="Choice">
            <when expression="#[flowVars['exists'] == false]">
                <db:update config-ref="MySQL_Configuration" doc:name="Database">
                    <db:parameterized-query><![CDATA[update employee set status="inactive" where emp_id = #[flowVars.employeeId]]]></db:parameterized-query>
                </db:update>
                <set-payload value="Employee Deleted " doc:name="Set Payload" />
            </when>
            <otherwise>
                <set-payload value="Employee Number  #[flowVars.employeeId] already deleted" doc:name="Set Payload" />
            </otherwise>
        </choice>
    </flow>
    <flow name="get:/employees:api-config">
        <set-variable variableName="name" value="#[message.inboundProperties.'http.query.params'.name == empty  ? '%%' : '%' + message.inboundProperties.'http.query.params'.name + '%']" doc:name="Variable" />
        <db:select config-ref="MySQL_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[select * from bank.employee where emp_name like #[flowVars.name]]]></db:parameterized-query>

        </db:select>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    <flow name="post:/employees:api-config">
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	emp_salary: payload.emp_salary as :string,
	emp_name: payload.emp_name,
	email: payload.email,
	emp_id: payload.emp_id as :string
}]]></dw:set-payload>
       </dw:transform-message>
        <enricher doc:name="Message Enricher" source="#[payload.size()&gt;0]" target="#[flowVars['exists']]">
            <db:select config-ref="MySQL_Configuration" doc:name="Database">
                <db:parameterized-query><![CDATA[select emp_name from bank.employee where emp_name = #[payload.emp_name]]]></db:parameterized-query>
            </db:select>
        </enricher>
        <choice doc:name="Choice">
            <when expression="#[flowVars['exists']==false]">
                <db:insert config-ref="MySQL_Configuration" doc:name="Database">
                    <db:parameterized-query><![CDATA[insert into employee(emp_id,emp_name,emp_salary,email,status) values (#[payload.emp_id],#[payload.emp_name],#[payload.emp_salary],#[payload.email],"Active")]]></db:parameterized-query>
                </db:insert>
                <set-payload value="Employee Created" doc:name="Set Payload"/>
            </when>
            <otherwise>
                <set-property propertyName="http.status" value="#[422]" doc:name="Property"/>
                <set-payload value="Employee #[payload.emp_name] Already Exists" doc:name="Set Payload"/>
            </otherwise>
        </choice>

    </flow>
    <flow name="get:/employees/{employeeId}:api-config">
        <db:select config-ref="MySQL_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[SELECT * FROM bank.employee where emp_id = #[flowVars.employeeId] and status = "Active"]]></db:parameterized-query>
        </db:select>
        <choice doc:name="Choice">
            <when expression="#[payload.size() !=0 ]">
                <set-payload value="#[payload]" doc:name="Set Payload"/>
            </when>
            <otherwise>
                <set-payload value="Employee doesnot exists" doc:name="Set Payload"/>
            </otherwise>
        </choice>


    </flow>
    <flow name="apiFlow">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="10" timeUnit="SECONDS"/>
            <db:select config-ref="MySQL_Configuration" doc:name="Database">
                <db:parameterized-query><![CDATA[select * from employee]]></db:parameterized-query>
            </db:select>
        </poll>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
    </flow>
    <apikit:mapping-exception-strategy name="api-apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
</mule>
